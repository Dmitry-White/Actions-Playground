name: Python Lambda Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.0

      - name: Install linter library
        run: |
          cd src/
          pip install flake8

      - name: Use linter library
        run: |
          cd src/
          flake8 . --count --statistics --select=E9,F63,F7,F82 --show-source
          flake8 . --count --statistics --exit-zero --max-complexity=10 --max-line-length=127

  build:
    name: Build Code
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.0

      - name: Install dependencies
        run: |
          cd src/
          pip install -r requirements.txt -t .

      - name: Bundle code into a Build Artifact
        run: |
          cd src/
          sudo apt update
          sudo apt upgrade -y
          sudo apt-get install zip -y
          zip -r ../${{ github.sha }}.zip .

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ${{ github.sha }}.zip

  publish:
    name: Publish Code
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: New release for ${{ github.sha }}. War, war never changes.
          draft: false
          prerelease: false

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.sha }}.zip
          asset_name: source_code_with_dependencies.zip
          asset_content_type: application/zip

  upload:
    name: Upload Artifact
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload to S3
        run: aws s3 cp \
          ${{ github.sha }}.zip \
          s3://${{ secrets.AWS_BUCKET }}/${{ github.sha }}.zip

  test:
    name: Test Code
    runs-on: ubuntu-latest
    needs: upload
    strategy:
      matrix:
        input: [Hello, Hi]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create test function
        env:
          LAMBDA_HANDLER: lambda_function.lambda_handler
          LAMBDA_RUNTIME: python3.8
        run: |
          aws lambda create-function \
            --function-name ${{ secrets.AWS_LAMBDA }}-${{ matrix.input }} \
            --code S3Bucket=${{ secrets.AWS_BUCKET }},S3Key=${{ github.sha }}.zip \
            --handler ${{ env.LAMBDA_HANDLER }} \
            --runtime ${{ env.LAMBDA_RUNTIME }} \
            --role ${{ secrets.AWS_LAMBDA_ROLE }}

      - name: Invoke test function
        run: |
          aws lambda invoke \
            --function-name ${{ secrets.AWS_LAMBDA }}-${{ matrix.input }} \
            --payload $(echo "{ \"input\": \"${{ matrix.input }} \"  }" | base64) \
            --output json out
          if grep -q "Error" out; then
            exit1
          fi

      - name: Wait 30 seconds
        run: sleep 30

      - name: Destroy test function
        if: ${{ always() }}
        run: |
          aws lambda delete-function \
            --function-name ${{ secrets.AWS_LAMBDA }}-${{ matrix.input }}

  deploy:
    name: Deploy Artifact
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.AWS_LAMBDA }} \
            --s3-bucket ${{ secrets.AWS_BUCKET }} \
            --s3-key ${{ github.sha }}.zip \
            --publish
